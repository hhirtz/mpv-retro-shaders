// Generated by mpv-libretro

//!HOOK MAIN
//!COMPONENTS 4
//!DESC sRGB to linear RGB
//!SAVE MAIN_RGB
//!BIND HOOKED

vec4 hook() {
	return linearize(HOOKED_tex(HOOKED_pos));
}

//!HOOK MAIN
//!COMPONENTS 4
//!DESC dot.slang
//!WIDTH OUTPUT.width 1 *
//!HEIGHT OUTPUT.height 1 *
//!BIND MAIN_RGB
//!BIND HOOKED

vec4 vertex_gl_Position;
struct _global_ {
    mat4 MVP;
    vec4 OutputSize;
    vec4 OriginalSize;
    vec4 SourceSize;
} global = _global_(mat4(1.), vec4(target_size, 1. / target_size.x, 1. / target_size.y), vec4(MAIN_RGB_size, MAIN_RGB_pt), vec4(MAIN_RGB_size, MAIN_RGB_pt));
float vertex_dist(vec2 coord, vec2 source) {
    vec2 delta = coord - source;
    return sqrt(dot(delta, delta));
}

float vertex_color_bloom(vec3 color) {
    const vec3 gray_coeff = vec3(0.3, 0.59, 0.11);
    float bright = dot(color, gray_coeff);
    return mix(1. + 0.05, 1. - 0.05, bright);
}

vec3 vertex_lookup(vec2 pixel_no, float offset_x, float offset_y, vec3 color) {
    vec2 offset = vec2(offset_x, offset_y);
    float delta = vertex_dist(fract(pixel_no), offset + vec2(0.5, 0.5));
    return color * exp(-2.4 * delta * vertex_color_bloom(color));
}

vec4 Position = vec4(HOOKED_pos, 0., 1.);
vec2 TexCoord = HOOKED_pos;
vec2 vTexCoord;
vec4 c00_10;
vec4 c00_01;
vec4 c20_01;
vec4 c21_02;
vec4 c12_22;
vec2 c11;
vec2 pixel_no;
void vertex_main() {
    vertex_gl_Position = global.MVP * Position;
    vTexCoord = TexCoord;
    float dx = global.SourceSize.z;
    float dy = global.SourceSize.w;
    c00_10 = vec4(vTexCoord + vec2(-dx, -dy), vTexCoord + vec2(0, -dy));
    c20_01 = vec4(vTexCoord + vec2(dx, -dy), vTexCoord + vec2(-dx, 0));
    c21_02 = vec4(vTexCoord + vec2(dx, 0), vTexCoord + vec2(-dx, dy));
    c12_22 = vec4(vTexCoord + vec2(0, dy), vTexCoord + vec2(dx, dy));
    c11 = vTexCoord;
    pixel_no = vTexCoord * global.SourceSize.xy;
}

float fragment_dist(vec2 coord, vec2 source) {
    vec2 delta = coord - source;
    return sqrt(dot(delta, delta));
}

float fragment_color_bloom(vec3 color) {
    const vec3 gray_coeff = vec3(0.3, 0.59, 0.11);
    float bright = dot(color, gray_coeff);
    return mix(1. + 0.05, 1. - 0.05, bright);
}

vec3 fragment_lookup(vec2 pixel_no, float offset_x, float offset_y, vec3 color) {
    vec2 offset = vec2(offset_x, offset_y);
    float delta = fragment_dist(fract(pixel_no), offset + vec2(0.5, 0.5));
    return color * exp(-2.4 * delta * fragment_color_bloom(color));
}

vec4 FragColor;
#define Source MAIN_RGB_raw
void fragment_main() {
    vec3 mid_color = fragment_lookup(pixel_no, 0., 0., texture(Source, vTexCoord).rgb);
    vec3 color = vec3(0., 0., 0.);
    color += fragment_lookup(pixel_no, -1., -1., texture(Source, vTexCoord).rgb);
    color += fragment_lookup(pixel_no, 0., -1., texture(Source, vTexCoord).rgb);
    color += fragment_lookup(pixel_no, 1., -1., texture(Source, vTexCoord).rgb);
    color += fragment_lookup(pixel_no, -1., 0., texture(Source, vTexCoord).rgb);
    color += mid_color;
    color += fragment_lookup(pixel_no, 1., 0., texture(Source, vTexCoord).rgb);
    color += fragment_lookup(pixel_no, -1., 1., texture(Source, vTexCoord).rgb);
    color += fragment_lookup(pixel_no, 0., 1., texture(Source, vTexCoord).rgb);
    color += fragment_lookup(pixel_no, 1., 1., texture(Source, vTexCoord).rgb);
    vec3 out_color = mix(1.2 * mid_color, color, 0.65);
    FragColor = vec4(out_color, 1.);
}

vec4 hook() {
    vertex_main();
    fragment_main();
    return delinearize(FragColor);
}

